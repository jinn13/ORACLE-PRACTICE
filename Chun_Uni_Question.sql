-- 1. 춘 기술대학교의 학과 이름과 계열을 표시하시오. 단, 출력 헤더는 "학과 명", "계열"으로 표시하도록 핚다.
SELECT DEPARTMENT_NAME AS "학과 명", 
       CATEGORY AS "계열"
FROM TB_DEPARTMENT;

-- 2. 학과의 학과 정원을 다음과 같은 형태로 화면에 출력한다.(||, CONCAT)
SELECT DEPARTMENT_NAME||'의 정원은 '||CAPACITY||'명 입니다.' AS "학과별 정원"
FROM TB_DEPARTMENT;

--3. "국어국문학과" 에 다니는 여학생 중 현재 휴학중인 여학생을 찾아달라는 요청이 들어왔다. 누구인가? 
-- (국문학과의 '학과코드'는 학과 테이블(TB_DEPARTMENT)을 조회해서 찾아 내도록 하자)
SELECT S.STUDENT_NAME
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO=D.DEPARTMENT_NO)
WHERE D.DEPARTMENT_NAME='국어국문학과' AND SUBSTR(S.STUDENT_SSN, 8, 1)=2 AND S.ABSENCE_YN='Y';

--4.  도서관에서 대출 도서 장기 연체자 들을 찾아 이름을 게시하고자 핚다. 그 대상자들의 학번이 다음과 같을 때 
-- 대상자들을 찾는 적절한 SQL 구문을 작성하시오.
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO IN('A513079', 'A513090', 'A513091', 'A513110', 'A513119')
ORDER BY STUDENT_NAME DESC;

--5. 입학정원이 20 명 이상 30 명 이하인 학과들의 학과 이름과 계열을 출력하시오.
-- (BETWEEN AND 또는 논리연산자로 풀이가능)
SELECT DEPARTMENT_NAME, 
       CATEGORY
FROM TB_DEPARTMENT
WHERE CAPACITY>=20 AND CAPACITY<=30;

--6. 춘 기술대학교는 총장을 제외하고 모든 교수들이 소속 학과를 가지고 있다. 
-- 그럼 춘기술대학교 총장의 이름을 알아낼 수 있는 SQL 문장을 작성하시오.
SELECT PROFESSOR_NAME
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO IS NULL;

--7. 혹시 전산 상의 착오로 학과가 지정되어 있지 않은 학생이 있는지 확인하고자 한다. 어떠한 SQL 문장을 사용하면 될 것인지 작성하시오.
SELECT *
FROM TB_STUDENT
WHERE DEPARTMENT_NO IS NULL;

--8. 수강신청을 하려고 한다. 선수과목 여부를 확인해야 하는데, 선수과목이 존재하는 과목들은 어떤 과목인지 과목번호를 조회해보시오.
-- 만약 과목명까지 하고싶다면 동일한 테이블을 SELF JOIN하기!(아래 예시 있음)
SELECT CLASS_NO
FROM TB_CLASS
WHERE PREATTENDING_CLASS_NO IS NOT NULL;

SELECT S.CLASS_NO "과목번호", 
       S.CLASS_NAME "과목명", 
       S.PREATTENDING_CLASS_NO "선수과목번호", 
       C.CLASS_NAME "선수과목명"
FROM TB_CLASS S
LEFT JOIN TB_CLASS C ON C.CLASS_NO=S.PREATTENDING_CLASS_NO
WHERE S.PREATTENDING_CLASS_NO IS NOT NULL;



--9. 춘 대학에는 어떤 계열(CATEGORY)들이 있는지 조회해보시오.
SELECT DISTINCT CATEGORY
FROM TB_DEPARTMENT
ORDER BY CATEGORY;

-- 10. 02 학번 전주 거주자들의 모임을 맊들려고 핚다. 
-- 휴학한 사람들은 제외한 재학중인 학생들의 학번, 이름, 주민번호를 출력하는 구문을 작성하시오.
SELECT STUDENT_NO, STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ENTRANCE_DATE LIKE '_2%' AND STUDENT_ADDRESS LIKE '전주%' AND ABSENCE_YN='N';
--WHERE ENTRANCE_DATE BETWEEN '02/01/01' AND '02/12/31';
--WHERE ENTRANCE_DATE BETWEEN TO_DATE('02/01/01', 'RR/MM/DD') AND TO_DATE('02/12/31', 'RR/MM/DD');

SELECT STUDENT_NO, 
       STUDENT_NAME, 
       STUDENT_SSN,
       STUDENT_ADDRESS, 
       ABSENCE_YN,
       ENTRANCE_DATE
FROM TB_STUDENT
--WHERE ENTRANCE_DATE LIKE '02%'  -- 포맷 달라질수도 있으니 아래방법을 추천!
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE)=2002 AND STUDENT_ADDRESS LIKE '전주%' AND ABSENCE_YN='N';
--AND SUBSTR(STUDENT_ADDRESS, 1, 2)='전주' 이것도 가능!



-------------------------------------------------------------------------------------------------------------
-- 2-1.  영어영문학과(학과코드 002) 학생들의 학번과 이름, 입학 년도를 입학 년도가 빠른 순으로 표시하는 SQL 문장을 작성하시오.
-- ( 단, 헤더는 "학번", "이름", "입학년도" 가 표시되도록 핚다.)
SELECT STUDENT_NO "학번", STUDENT_NAME "이름", TO_CHAR(ENTRANCE_DATE, 'YYYY-MM-DD') "입학년도"
FROM TB_STUDENT
WHERE DEPARTMENT_NO=002
ORDER BY STUDENT_NAME;

SELECT STUDENT_NO "학번", 
       STUDENT_NAME "이름", 
       TO_CHAR(ENTRANCE_DATE, 'YYYY-MM-DD') "입학년도"
FROM TB_STUDENT
WHERE DEPARTMENT_NO='002'
ORDER BY 입학년도;


-- 2-2. 춘 기술대학교의 교수 중 이름이 세 글자가 아닌 교수가 핚 명 있다고 핚다. 
-- 그 교수의 이름과 주민번호를 화면에 출력하는 SQL 문장을 작성해 보자. 
-- (* 이때 올바르게 작성핚 SQL 문장의 결과 값이 예상과 다르게 나올 수 있다. 원인이 무엇일지 생각해볼 것)
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE PROFESSOR_NAME NOT LIKE '___';
--WHERE LENGTH(PROFESSOR_NAME)!=3; --이 방법도 가능! 


-- 2-3 (현재 년도를 2008년으로 설정함, 근데 결과와는 좀 다름.. 근데 나이별 내림차면 이게 맞는것 같은데.. 나중에 확인필요)
-- 춘 기술대학교의 남자 교수들의 이름과 나이를 출력하는 SQL 문장을 작성하시오. 
-- 단 이때 나이가 적은 사람에서 맋은 사람 순서로 화면에 출력되도록 맊드시오. 
-- (단, 교수 중 2000 년 이후 출생자는 없으며 출력 헤더는 "교수이름", "나이"로 핚다. 나이는 ‘맊’으로 계산핚다.)
SELECT PROFESSOR_NAME "교수이름", 
       2008-CONCAT(19, SUBSTR(PROFESSOR_SSN, 1, 2)) "나이"
FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN, 8, 1)=1
ORDER BY PROFESSOR_SSN DESC;

-- 개월수 차이에다가 12 나누면..
SELECT PROFESSOR_NAME "교수이름", 
       FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE('19'||SUBSTR(PROFESSOR_SSN, 1, 2), 'YYYY'))/12) "나이"
FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN, 8, 1)='1'
ORDER BY 2, 1;


--2-4.교수들의 이름 중 성을 제외한 이름만 출력하는 SQL 문장을 작성하시오. 출력 헤더는 ‚이름‛ 이 찍히도록 한다. 
-- (성이 2 자인 경우는 교수는 없다고 가정하시오)
SELECT SUBSTR(PROFESSOR_NAME, 2, 4) "이름"
FROM TB_PROFESSOR;

-- 2-5. 춘 기술대학교의 재수생 입학자를 구하려고 한다. 어떻게 찾아낼 것인가? 이때, 19 살에 입학하면 재수를 하지 않은 것으로 간주한다.
SELECT STUDENT_NO, STUDENT_NAME 
/*, STUDENT_SSN, ENTRANCE_DATE, TO_CHAR(ENTRANCE_DATE, 'YYYY')-CONCAT(19, SUBSTR(STUDENT_SSN, 1, 2))"입학나이"*/
FROM TB_STUDENT
WHERE TO_CHAR(ENTRANCE_DATE, 'YYYY')-CONCAT(19, SUBSTR(STUDENT_SSN, 1, 2))>19;


SELECT STUDENT_NO, 
       STUDENT_NAME
FROM TB_STUDENT
WHERE MONTHS_BETWEEN(ENTRANCE_DATE, TO_DATE(SUBSTR(STUDENT_SSN, 1, 6), 'RRMMDD')) / 12 > 19 AND
      MONTHS_BETWEEN(ENTRANCE_DATE, TO_DATE(SUBSTR(STUDENT_SSN, 1, 6), 'RRMMDD'))/12<=20; --삼수생 제외


-- 2-6. 2020 년 크리스마스는 무슨 요일인가?
SELECT TO_CHAR(TO_DATE('20201225'), 'DAY') AS "2020년 크리스마스 요일" FROM DUAL;
SELECT TO_CHAR(TO_DATE('2021/12/25'), 'DAY') "2021년 크리스마스 요일" FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'DAY') FROM DUAL;

-- 2-7 (YY일 경우) : 2099년10월11일, 2049년10월11일
--     (RR일 경우) : 1999년 10월11일, 2049년10월11일
--다만 YYYY, RRRR일 경우에는 차이가 없다고 한다. 

-- TO_DATE('99/10/11','YY/MM/DD'), TO_DATE('49/10/11','YY/MM/DD') 은 각각 몇 년 몇 월 몇 일을 의미핛까? 
-- 또 TO_DATE('99/10/11','RR/MM/DD'), TO_DATE('49/10/11','RR/MM/DD') 은 각각 몇 년 몇 월 몇 일을 의미핛까?
SELECT TO_CHAR(TO_DATE('49/10/11'), 'YYYY/MM/DD') FROM DUAL;
SELECT TO_CHAR(TO_DATE('99/10/11'), 'YYYY/MM/DD') FROM DUAL;
SELECT TO_CHAR(TO_DATE('49/10/11'), 'RRRR/MM/DD') FROM DUAL;
SELECT TO_CHAR(TO_DATE('99/10/11'), 'RRRR/MM/DD') FROM DUAL;

-- 2-8. 춘 기술대학교의 2000 년도 이후 입학자들은 학번이 A 로 시작하게 되어있다.
-- 2000 년도 이전 학번을 받은 학생들의 학번과 이름을 보여주는 SQL 문장을 작성하시오.
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE TO_CHAR(ENTRANCE_DATE, 'RR')>'2000';
-- NOT LIKE로 구할수도 있다고 한다. 한번 해보기!


-- 2-9. 학번이 A517178 인 핚아름 학생의 학점 총 평점을 구하는 SQL 문을 작성하시오. 
-- 단, 이때 출력 화면의 헤더는 "평점" 이라고 찍히게 하고, 점수는 반올림하여 소수점 이하 핚 자리까지맊 표시핚다.
SELECT ROUND(SUM(POINT)/8, 1)"평점"
FROM TB_GRADE
WHERE STUDENT_NO='A517178';

-- 2-10.  학과별 학생수를 구하여 "학과번호", "학생수(명)" 의 형태로 헤더를 맊들어 결과값이 출력되도록 하시오.
SELECT DEPARTMENT_NO "학과번호", COUNT(DEPARTMENT_NO) "학생수(명)"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY "학과번호";

-- 2-11.  지도 교수를 배정받지 못한 학생의 수는 몇 명 정도 되는 알아내는 SQL 문을 작성하시오.
SELECT COUNT(CASE WHEN COACH_PROFESSOR_NO IS NULL THEN 'NULL' ELSE '1' END) "COUNT(*)"
FROM TB_STUDENT
GROUP BY COACH_PROFESSOR_NO
HAVING COACH_PROFESSOR_NO IS NULL;
--?? 난 왜이렇게 복잡하게 풀었지??

SELECT COUNT(*)
FROM TB_STUDENT
GROUP BY COACH_PROFESSOR_NO
HAVING COACH_PROFESSOR_NO IS NULL;


-- 2-12.학번이 A112113 인 김고운 학생의 년도 별 평점을 구하는 SQL 문을 작성하시오. 
-- 단, 이때 출력 화면의 헤더는 "년도", "년도 별 평점" 이라고 찍히게 하고, 점수는 반올림하여 소수점 이하 한 자리까지만 표시한다.
SELECT SUBSTR(TERM_NO, 1, 4) "년도", ROUND(AVG(POINT), 1) "년도 별 평점"
FROM TB_GRADE
WHERE STUDENT_NO='A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4)
ORDER BY SUBSTR(TERM_NO, 1, 4);

SELECT SUBSTR(TERM_NO, 1, 4) AS "년도", ROUND(AVG(NVL(POINT, 0)), 1) "년도 별 평점"
FROM TB_GRADE
WHERE STUDENT_NO='A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4)
ORDER BY 1;

--SELECT "년도", SUM("평점")
--FROM (SELECT SUBSTR(TERM_NO, 1, 4)"년도", SUM(POINT) AS "평점"
--      FROM TB_GRADE
--      WHERE STUDENT_NO='A112113'
--      GROUP BY TERM_NO)
--GROUP BY "년도"
--ORDER BY "년도";

-- 2-13 학과 별 휴학생 수를 파악하고자 한다. 학과 번호와 휴학생 수를 표시하는 SQL 문장을 작성하시오.
-- (제일 오래걸렸음;; COUNT가 0은 아예 결과값이 없어서ㅠ JOIN도 해보고 UNION도 해보다가 그냥 서브쿼리 만듬)
-- COUNT는 0은 아예 결과값이 없음. 이 경우 COUNT(*)을 포함한 서브쿼리 작성 → 그걸 FROM절에 넣고 결과값을 뽑는다!
SELECT DEPARTMENT_NO "학과코드명", "휴학생 수" 
FROM (SELECT DEPARTMENT_NO, COUNT(*), COUNT(DECODE(ABSENCE_YN, 'Y', 1)) AS "휴학생 수"
      FROM TB_STUDENT
      GROUP BY DEPARTMENT_NO)
ORDER BY DEPARTMENT_NO;

SELECT DEPARTMENT_NO "학과코드명", COUNT(DECODE(ABSENCE_YN, 'Y', ABSENCE_YN, NULL)) "휴학생 수"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;


--SELECT DEPARTMENT_NO, COUNT(*), COUNT(DECODE(ABSENCE_YN, 'Y', 1))
--FROM TB_STUDENT
--GROUP BY DEPARTMENT_NO
--ORDER BY DEPARTMENT_NO;

-- 2-14. 춘 대학교에 다니는 동명이인(同名異人) 학생들의 이름을 찾고자 핚다. 어떤 SQL  문장을 사용하면 가능하겠는가?

SELECT STUDENT_NAME "동일이름", COUNT(STUDENT_NAME) "동명인 수"
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(STUDENT_NAME)>1
ORDER BY STUDENT_NAME;


-- 2-15. 학번이 A112113 인 김고운 학생의 년도, 학기 별 평점과 년도 별 누적 평점 , 총평점을 구하는 SQL 문을 작성하시오. 
-- (단, 평점은 소수점 1 자리까지맊 반올림하여 표시핚다.)
SELECT SUBSTR(TERM_NO, 1, 4) "년도", SUBSTR(TERM_NO, 5, 2) "학기", ROUND(AVG(POINT), 1) "평점"
FROM TB_GRADE
WHERE STUDENT_NO='A112113'
GROUP BY ROLLUP(SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5, 2));


SELECT SUBSTR(TERM_NO, 1, 4) AS "년도", 
       SUBSTR(TERM_NO, 5) AS "학기",
       ROUND(AVG(NVL(POINT, 0)), 1) AS "평균"
FROM TB_GRADE
WHERE STUDENT_NO='A112113'
GROUP BY ROLLUP(SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5))
ORDER BY SUBSTR(TERM_NO, 1, 4);


--------------------------------------------------------------------------------------------------------------
-- 3-1. 학생이름과 주소지를 표시하시오. 단, 출력 헤더는 "학생 이름", "주소지"로 하고, 정렬은 이름으로 오름차순 표시하도록 핚다.
SELECT STUDENT_NAME "학생 이름", STUDENT_ADDRESS "주소지"
FROM TB_STUDENT
ORDER BY STUDENT_NAME;

-- 3-2.학생이름과 주소지를 표시하시오. 단, 출력 헤더는 "학생 이름", "주소지"로 하고, 정렬은 이름으로 오름차순 표시하도록 핚다.
SELECT STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN='Y'
ORDER BY STUDENT_SSN DESC;

-- 3-3.  주소지가 강원도나 경기도인 학생들 중 1900 년대 학번을 가진 학생들의 이름과 학번,  주소를 이름의 오름차순으로 화면에 출력하시오. 
-- 단, 출력헤더에는 "학생이름","학번", "거주지 주소" 가 출력되도록 핚다.
SELECT STUDENT_NAME "학생이름", STUDENT_NO "학번", STUDENT_ADDRESS"거주지 주소"
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_ADDRESS, 1, 3) IN ('경기도', '강원도') AND STUDENT_NO LIKE '9%'
ORDER BY STUDENT_NAME;


-- 3-4. 현재 법학과 교수 중 가장 나이가 맋은 사람부터 이름을 확인핛 수 있는 SQL 문장을 작성하시오. 
-- (법학과의 '학과코드'는 학과 테이블(TB_DEPARTMENT)을 조회해서 찾아 내도록 하자)
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO='005'
ORDER BY PROFESSOR_SSN;


-- 3-5.2004 년 2 학기에 'C3118100' 과목을 수강핚 학생들의 학점을 조회하려고 핚다. 학점이 높은 학생부터 표시하고, 
-- 학점이 같으면 학번이 낮은 학생부터 표시하는 구문을 작성해보시오.
SELECT G.STUDENT_NO, TO_CHAR(G.POINT, '9.99')
FROM TB_STUDENT S
LEFT JOIN TB_GRADE G ON(S.STUDENT_NO=G.STUDENT_NO)
WHERE TERM_NO=200402 AND CLASS_NO='C3118100'
ORDER BY POINT DESC;


-- 3-6. 학생 번호, 학생 이름, 학과 이름을 학생 이름으로 오름차순 정렬하여 출력하는 SQL 문을 작성하시오.
SELECT STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO=D.DEPARTMENT_NO)
ORDER BY STUDENT_NAME;


-- 3-7. 춘 기술대학교의 과목 이름과 과목의 학과 이름을 출력하는 SQL 문장을 작성하시오.
SELECT C.CLASS_NAME, D.DEPARTMENT_NAME
FROM TB_CLASS C
JOIN TB_DEPARTMENT D ON(C.DEPARTMENT_NO=D.DEPARTMENT_NO);

-- 3-8.  과목별 교수 이름을 찾으려고 핚다. 과목 이름과 교수 이름을 출력하는 SQL 문을 작성하시오.
--순서 미묘하게 다른데.. 결과는 여튼 같음. 어라?? 나 왜 DEPARTMENT JOIN 한거지??? 과목이름 확인하다가 들어갔나..???
SELECT C.CLASS_NAME, P.PROFESSOR_NAME
FROM TB_CLASS C
JOIN TB_DEPARTMENT D ON(C.DEPARTMENT_NO=D.DEPARTMENT_NO)
JOIN TB_CLASS_PROFESSOR CP ON(CP.CLASS_NO=C.CLASS_NO)
JOIN TB_PROFESSOR P ON(P.PROFESSOR_NO=CP.PROFESSOR_NO);

SELECT C.CLASS_NAME, P.PROFESSOR_NAME
FROM TB_CLASS C
JOIN TB_CLASS_PROFESSOR CP ON(C.CLASS_NO=CP.CLASS_NO)
JOIN TB_PROFESSOR P ON(CP.PROFESSOR_NO=P.PROFESSOR_NO)
ORDER BY 1;

--3-9. 8 번의 결과 중 ‘인문사회’ 계열에 속한 과목의 교수 이름을 찾으려고 핚다. 
-- 이에 해당하는 과목 이름과 교수 이름을 출력하는 SQL 문을 작성하시오.
-- 순서는 뭔가 틀린데.. 여튼 결과수는 맞음. 
SELECT C.CLASS_NAME, P.PROFESSOR_NAME
FROM TB_CLASS C
JOIN TB_DEPARTMENT D ON(C.DEPARTMENT_NO=D.DEPARTMENT_NO)
JOIN TB_CLASS_PROFESSOR CP ON(CP.CLASS_NO=C.CLASS_NO)
JOIN TB_PROFESSOR P ON(P.PROFESSOR_NO=CP.PROFESSOR_NO)
WHERE D.CATEGORY='인문사회';

SELECT C.CLASS_NAME, P.PROFESSOR_NAME
FROM TB_CLASS C
JOIN TB_CLASS_PROFESSOR CP ON(C.CLASS_NO=CP.CLASS_NO)
JOIN TB_PROFESSOR P ON(CP.PROFESSOR_NO=P.PROFESSOR_NO)
JOIN TB_DEPARTMENT D ON(P.DEPARTMENT_NO=D.DEPARTMENT_NO)
WHERE D.CATEGORY='인문사회'
ORDER BY 2, 1;



--3-10.‘음악학과’ 학생들의 평점을 구하려고 핚다. 음악학과 학생들의 "학번", "학생 이름", "전체 평점"을 출력하는 SQL 문장을 작성하시오. 
-- (단, 평점은 소수점 1 자리까지맊 반올림하여 표시한다.) 
-- 이거 학과이름 조회하려면 조인 더 걸어야 하는데..그게 귀찮아서 학과번호로 조회했던걸로 기억. 
SELECT S.STUDENT_NO "학번", S.STUDENT_NAME "학생 이름", ROUND(AVG(G.POINT), 1) "전체 평점"
FROM TB_STUDENT S
JOIN TB_GRADE G ON (S.STUDENT_NO=G.STUDENT_NO)
WHERE S.DEPARTMENT_NO='059'
GROUP BY (S.STUDENT_NO, S.STUDENT_NAME)
ORDER BY S.STUDENT_NO;

SELECT S.STUDENT_NO "학번", 
       S.STUDENT_NAME "학생 이름", 
       ROUND(AVG(G.POINT), 1) "전체 평점"
FROM TB_GRADE G
JOIN TB_STUDENT S ON(G.STUDENT_NO=S.STUDENT_NO)
JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO=D.DEPARTMENT_NO)
WHERE D.DEPARTMENT_NAME='음악학과'
GROUP BY S.STUDENT_NO, S.STUDENT_NAME
ORDER BY S.STUDENT_NAME;






--3-11. 학번이 A313047 인 학생이 학교에 나오고 있지 않다. 지도 교수에게 내용을 젂달하기 위핚 학과 이름, 
--학생 이름과 지도 교수 이름이 필요하다. 이때 사용핛 SQL 문을 작성하시오. 
--단, 출력헤더는 ‚학과이름‛, ‚학생이름‛, ‚지도교수이름‛으로출력되도록 핚다.

SELECT D.DEPARTMENT_NAME "학과이름", S.STUDENT_NAME "학생이름", P.PROFESSOR_NAME "지도교수이름"
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON(d.department_no=s.department_no)
JOIN TB_PROFESSOR P ON(P.PROFESSOR_NO=s.coach_professor_no)
WHERE STUDENT_NO='A313047';

-- 3-12. 2007 년도에 '인갂관계롞' 과목을 수강핚 학생을 찾아 학생이름과 수강학기름 표시하는 SQL 문장을 작성하시오.

SELECT STUDENT_NAME, TERM_NO "TERM_NAME"
FROM TB_STUDENT S
JOIN TB_GRADE G ON(S.STUDENT_NO=G.STUDENT_NO)
WHERE G.CLASS_NO='C2604100' AND SUBSTR(TERM_NO, 1, 4)=2007
ORDER BY STUDENT_NAME;

-- 3-13. 예체능 계열 과목 중 과목 담당교수를 한 명도 배정받지 못한 과목을 찾아 그 과목 이름과 학과 이름을 출력하는 SQL 문장을 작성하시오.
-- 순서는 다르지만 결과는 같음
SELECT C.CLASS_NAME, D.DEPARTMENT_NAME
FROM TB_CLASS C
LEFT JOIN TB_CLASS_PROFESSOR CP ON(C.CLASS_NO=CP.CLASS_NO)
LEFT JOIN TB_DEPARTMENT D ON(c.department_no=d.department_no)
WHERE CP.PROFESSOR_NO IS NULL AND D.CATEGORY='예체능';

-- 수업에서 다른분의 테이블 예시
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM TB_CLASS C
LEFT JOIN TB_CLASS_PROFESSOR CP USING(CLASS_NO)
INNER JOIN TB_DEPARTMENT D USING(DEPARTMENT_NO)
WHERE D.CATEGORY = '예체능'
        AND PROFESSOR_NO IS NULL
ORDER BY 1;


-- 3-14. 춘 기술대학교 서반아어학과 학생들의 지도교수를 게시하고자 핚다. 학생이름과 지도교수 이름을 찾고 
--맊일 지도 교수가 없는 학생일 경우 "지도교수 미지정‛으로 표시하도록 하는 SQL 문을 작성하시오. 
--단, 출력헤더는 ‚학생이름‛, ‚지도교수‛로 표시하며 고학번 학생이 먼저 표시되도록 핚다.
SELECT S.STUDENT_NAME "학생이름", NVL(P.PROFESSOR_NAME, '지도교수 미지정') "지도교수"
FROM TB_STUDENT S
LEFT JOIN TB_DEPARTMENT D ON(D.DEPARTMENT_NO=S.DEPARTMENT_NO)
LEFT JOIN TB_PROFESSOR P ON(P.PROFESSOR_NO=S.COACH_PROFESSOR_NO)
WHERE D.DEPARTMENT_NAME='서반아어학과'
ORDER BY s.student_no;


-- 3-15. 휴학생이 아닌 학생 중 평점이 4.0 이상인 학생을 찾아 그 학생의 학번, 이름, 학과이름, 평점을 출력하는 SQL 문을 작성하시오.
SELECT S.STUDENT_NO, S.STUDENT_NAME, D.DEPARTMENT_NAME, ROUND(AVG(G.POINT), 8)
FROM TB_STUDENT S
LEFT JOIN TB_DEPARTMENT D ON(D.DEPARTMENT_NO=S.DEPARTMENT_NO)
LEFT JOIN TB_GRADE G ON(S.STUDENT_NO=G.STUDENT_NO) 
WHERE S.ABSENCE_YN='N'
GROUP BY (S.STUDENT_NO, S.STUDENT_NAME, D.DEPARTMENT_NAME)
HAVING AVG(G.POINT)>=4.0
ORDER BY S.STUDENT_NO;

SELECT S.STUDENT_NO, S.STUDENT_NAME, D.DEPARTMENT_NAME, ROUND(AVG(G.POINT), 1)
FROM TB_STUDENT S
JOIN TB_GRADE G ON(S.STUDENT_NO=G.STUDENT_NO)
JOIN TB_DEPARTMENT D ON(D.DEPARTMENT_NO=S.DEPARTMENT_NO)
WHERE S.ABSENCE_YN='N'
GROUP BY (S.STUDENT_NO, S.STUDENT_NAME, D.DEPARTMENT_NAME)
HAVING AVG(G.POINT)>=4.0
ORDER BY 1;


-- 3-16. 홖경조경학과 젂공과목들의 과목 별 평점을 파악핛 수 있는 SQL 문을 작성하시오.
SELECT DISTINCT C.CLASS_NO, C.CLASS_NAME, TRUNC(AVG(G.POINT), 8) "AVG(POING)"
FROM TB_CLASS C
LEFT JOIN TB_GRADE G ON(g.class_no=c.class_no)
LEFT JOIN TB_DEPARTMENT D ON(D.DEPARTMENT_NO=C.DEPARTMENT_NO)
WHERE d.department_name='환경조경학과' AND SUBSTR(C.CLASS_TYPE, 1, 2)='전공'
GROUP BY(C.CLASS_NO, C.CLASS_NAME)
ORDER BY C.CLASS_NO;


-- 3-17.춘 기술대학교에 다니고 있는 최경희 학생과 같은 과 학생들의 이름과 주소를 출력하는 SQL 문을 작성하시오.

SELECT STUDENT_NAME, STUDENT_ADDRESS
FROM TB_STUDENT
WHERE DEPARTMENT_NO='038';

-- 3-18. 국어국문학과에서 총 평점이 가장 높은 학생의 이름과 학번을 표시하는 SQL 문을 작성하시오.
--이렇게 까지 어렵게 하진 않을것 같은데 ROWNUM 써보려고 하다보니 그냥..좀 ... 복잡해짐.. 다음에 간단하게 바꾸자. 
SELECT "STUDENT_NO", "STUDENT_NAME"
FROM (SELECT ROWNUM, "STUDENT_NO", "STUDENT_NAME", "평점"
      FROM (SELECT S.STUDENT_NO "STUDENT_NO", S.STUDENT_NAME "STUDENT_NAME", AVG(g.point)"평점"
            FROM TB_STUDENT S
            JOIN TB_DEPARTMENT D ON(s.department_no=d.department_no)
            JOIN TB_GRADE G ON(g.student_no=s.student_no)
            WHERE d.department_name='국어국문학과'
            GROUP BY (S.STUDENT_NO, S.STUDENT_NAME)
            ORDER BY AVG(g.point) DESC)
    WHERE ROWNUM<=1); 

-- 수업듣고 위에서 내가 한 것의 수정버젼
SELECT STUDENT_NO, STUDENT_NAME
FROM(SELECT S.STUDENT_NO, S.STUDENT_NAME, AVG(g.point)"평점"
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON(s.department_no=d.department_no)
JOIN TB_GRADE G ON(g.student_no=s.student_no)
WHERE d.department_name='국어국문학과'
GROUP BY (S.STUDENT_NO, S.STUDENT_NAME)
ORDER BY AVG(g.point) DESC
)
WHERE ROWNUM=1;


-- 2번째 방법(이 방법이 내가 원하던 방법인것 같은데 ROWNUM안줘도 ROWNUM으로 할수있구나.. 처음알았다!)
SELECT STUDENT_NO, STUDENT_NAME
FROM(
    SELECT  S.STUDENT_NO, S.STUDENT_NAME, AVG(POINT)
    FROM TB_STUDENT S
    JOIN TB_GRADE G ON(S.STUDENT_NO=G.STUDENT_NO)
    JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO=D.DEPARTMENT_NO)
    WHERE D.DEPARTMENT_NAME='국어국문학과'
    GROUP BY S.STUDENT_NO, S.STUDENT_NAME
    ORDER BY AVG(G.POINT)DESC
)
WHERE ROWNUM=1;


----- 수업에서 나온 버젼 첫번째
SELECT  S.STUDENT_NO, S.STUDENT_NAME
FROM TB_STUDENT S
JOIN TB_GRADE G ON(S.STUDENT_NO=G.STUDENT_NO)
JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO=D.DEPARTMENT_NO)
WHERE D.DEPARTMENT_NAME='국어국문학과'
GROUP BY S.STUDENT_NO, S.STUDENT_NAME
HAVING AVG(POINT)=(
    SELECT MAX(AVG(G.POINT)) 
    FROM TB_STUDENT S
    JOIN TB_GRADE G ON(S.STUDENT_NO=G.STUDENT_NO)
    JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO=D.DEPARTMENT_NO)
    WHERE D.DEPARTMENT_NAME='국어국문학과'
    GROUP BY S.STUDENT_NO
);



-- 첫번째 방법에서 사용한 서브쿼리문
--SELECT MAX(AVG(G.POINT)) 
--FROM TB_STUDENT S
--JOIN TB_GRADE G ON(S.STUDENT_NO=G.STUDENT_NO)
--JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO=D.DEPARTMENT_NO)
--WHERE D.DEPARTMENT_NAME='국어국문학과'
--GROUP BY S.STUDENT_NO;

-- 3-19. 춘 기술대학교의 "홖경조경학과"가 속핚 같은 계열 학과들의 학과 별 젂공과목 평점을 파악하기 위핚 적젃핚 SQL 문을 찾아내시오. 
-- 단, 출력헤더는 "계열 학과명", "젂공평점"으로 표시되도록 하고, 평점은 소수점 핚 자리까지맊 반올림하여 표시되도록 핚다.
SELECT d.department_name "계열 학과명", ROUND(AVG(G.POINT), 1) "전공평점"
FROM TB_DEPARTMENT D
LEFT JOIN TB_STUDENT S ON(S.DEPARTMENT_NO=D.DEPARTMENT_NO)
LEFT JOIN TB_GRADE G ON(g.student_no=s.student_no)
LEFT JOIN TB_CLASS C ON(c.class_no=g.class_no)
WHERE CATEGORY='자연과학' AND SUBSTR(C.CLASS_TYPE, 1, 2)='전공'
GROUP BY d.department_name
ORDER BY d.department_name;


SELECT * FROM TB_STUDENT;
SELECT * FROM TB_PROFESSOR;
SELECT * FROM TB_DEPARTMENT;
SELECT * FROM TB_GRADE;
SELECT * FROM TB_CLASS;
SELECT * FROM TB_CLASS_PROFESSOR;

-----------------------------------------------------------------------------------------------------
-- 4-1.
CREATE TABLE TB_CATEGORY(
    NAME VARCHAR2(10),
    USE_YN CHAR(1) DEFAULT 'Y'
);

-- 4-2.    
CREATE TABLE TB_CLASS_TYPE(
    NO VARCHAR2(5) CONSTRAINT TB_CLASS_TYPE_NO_PK PRIMARY KEY, 
    NAME VARCHAR2(10)
);

-- 4-3. ALTER TABLE 테이블명 ADD [CONSTRAINT 제약조건명] PRIMARY KEY(컬럼명); 
ALTER TABLE TB_CATEGORY
ADD CONSTRAINT TB_CATEGORY_NAME_PK PRIMARY KEY(NAME);

--4-4. ALTER TABLE 테이블명 MODIFY 컬럼명 [CONSTRAINT 제약조건명] NOT NULL;
ALTER TABLE TB_CLASS_TYPE
MODIFY NAME CONSTRAINT TB_CLASS_TYPE_NAME_NN NOT NULL;

--4-5. 데이터 타입 변경 : ALTER TABLE 테이블명 MODIFY 컬럼명 변경할 데이터타입
ALTER TABLE TB_CLASS_TYPE MODIFY NO VARCHAR2(10);
ALTER TABLE TB_CLASS_TYPE MODIFY NAME VARCHAR2(20);
ALTER TABLE TB_CATEGORY MODIFY NAME VARCHAR2(20);

-- 4-6. 컬럼명 변경 : ALTER TABLE 테이블명 RENAME COLUMN 기존컬럼명 TO 변경할컬럼명
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NAME TO CLASS_TYPE_NAME;
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NO TO CLASS_TYPE_NO;
ALTER TABLE TB_CATEGORY RENAME COLUMN NAME TO CATEGORY_NAME;

-- 4-7.
ALTER TABLE TB_CATEGORY RENAME CONSTRAINT TB_CATEGORY_NAME_PK TO PK_CATEGORY_NAME;
ALTER TABLE TB_CLAS_TYPE RENAME CONSTRAINT TB_CLASS_TYPE_NO_PK TO PK_CLASS_TYPE_NO;

-- 4-8.
INSERT INTO TB_CATEGORY VALUES ('공학','Y');
INSERT INTO TB_CATEGORY VALUES ('자연과학','Y');
INSERT INTO TB_CATEGORY VALUES ('의학','Y');
INSERT INTO TB_CATEGORY VALUES ('예체능','Y');
INSERT INTO TB_CATEGORY VALUES ('인문사회','Y');
COMMIT;

-- 4-9. ALTER TABLE 테이블명 ADD [CONSTRAINT 제약조건명] FOREIGN KEY(컬럼명) REFERENCES 테이블명 [(컬럼명)];
ALTER TABLE TB_DEPARTMENT ADD CONSTRAINT FK_DEPARTMENT_CATEGORY FOREIGN KEY(CATEGORY) REFERENCES TB_CATEGORY(CATEGORY_NAME);


-- 4-10. 뷰 생성
CREATE OR REPLACE VIEW VW_학생일반정보
AS SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
    FROM TB_STUDENT;

-- 4-11.
CREATE OR REPLACE VIEW VW_지도면담
AS SELECT S.STUDENT_NAME, D.DEPARTMENT_NAME, P.PROFESSOR_NAME
    FROM TB_STUDENT S
    LEFT JOIN TB_DEPARTMENT D ON(D.DEPARTMENT_NO=S.DEPARTMENT_NO)
    LEFT JOIN TB_PROFESSOR P ON(p.professor_no=S.COACH_PROFESSOR_NO)
    ORDER BY D.DEPARTMENT_NAME;
    
    
-- 4-12.
CREATE OR REPLACE VIEW VW_학과별학생수
AS SELECT D.DEPARTMENT_NAME, COUNT(S.STUDENT_NO)"STUDENT_COUNT"
    FROM TB_STUDENT S
    LEFT JOIN TB_DEPARTMENT D ON(d.department_no=s.department_no)
    GROUP BY DEPARTMENT_NAME;
    
-- 4-13.
UPDATE VW_학생일반정보
SET STUDENT_NAME='감자' --원래는 '서가람'임
WHERE STUDENT_NO='A213046';

SELECT STUDENT_NO, STUDENT_NAME
FROM VW_학생일반정보
WHERE STUDENT_NO='A213046';

-- 4-14. 뷰 생성(READ ONLY)
CREATE OR REPLACE VIEW VW_학생일반정보
AS SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
    FROM TB_STUDENT
WITH READ ONLY;

-- 4-15.
SELECT "과목번호", "과목이름", "수강생수"
FROM (SELECT ROWNUM, "과목번호", "과목이름", "수강생수"
FROM (SELECT C.CLASS_NO "과목번호", C.CLASS_NAME "과목이름", COUNT(*) AS "수강생수"
        FROM TB_CLASS C
        LEFT JOIN TB_GRADE G ON(C.CLASS_NO=G.CLASS_NO)
        WHERE SUBSTR(G.TERM_NO, 1, 4) IN (2009, 2008, 2007, 2006, 2005)
        GROUP BY C.CLASS_NO, C.CLASS_NAME
        ORDER BY COUNT(*) DESC)
    WHERE ROWNUM<=3);
    
SELECT C.CLASS_NO "과목번호", C.CLASS_NAME "과목이름", COUNT(*) "누적수강생수(명)"
FROM TB_CLASS C
LEFT JOIN TB_GRADE G ON(C.CLASS_NO=G.CLASS_NO)
WHERE SUBSTR(G.TERM_NO, 1, 4) IN (2009, 2008, 2007, 2006, 2005)
GROUP BY C.CLASS_NO, C.CLASS_NAME
ORDER BY COUNT(*) DESC;


-------------------------------------------------------------------------------------------------------------------
--[DML]5-1. 과목유형 테이블(TB_CLASS_TYPE)에 아래와 같은 데이터를 입력하시오.
INSERT INTO TB_CLASS_TYPE VALUES('01,', '전공필수');
INSERT INTO TB_CLASS_TYPE VALUES('02,', '전공선택');
INSERT INTO TB_CLASS_TYPE VALUES('03,', '교양필수');
INSERT INTO TB_CLASS_TYPE VALUES('04,', '교양선택');
INSERT INTO TB_CLASS_TYPE VALUES('05.', '논문지도');
SELECT * FROM TB_CLASS_TYPE;


-- 5-2. 춘 기술대학교 학생들의 정보가 포함되어 있는 학생일반정보 테이블을 만들고자 핚다. 
-- 아래 내용을 참고하여 적절한 SQL 문을 작성하시오. (서브쿼리를 이용하시오)
CREATE TABLE TB_학생일반정보
AS SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
    FROM TB_STUDENT;
    
-- 5-3. 국어국문학과 학생들의 정보맊이 포함되어 있는 학과정보 테이블을 만들고자 한다.  
-- 아래 내용을 참고하여 적절한 SQL 문을 작성하시오. (힌트 : 방법은 다양함, 소신껏 작성하시오)
CREATE TABLE TB_국어국문학과
AS SELECT S.STUDENT_NO "학번", 
       S.STUDENT_NAME "학생이름", 
       EXTRACT(YEAR FROM TO_DATE(SUBSTR(S.STUDENT_SSN, 1, 6), 'RRMMDD'))"출생년도", 
       NVL(P.PROFESSOR_NAME, '지도교수 없음') "교수이름" 
    FROM TB_STUDENT S
    LEFT JOIN TB_PROFESSOR P ON(S.COACH_PROFESSOR_NO=P.PROFESSOR_NO)    
    LEFT JOIN TB_DEPARTMENT D ON(D.DEPARTMENT_NO=S.DEPARTMENT_NO)
    WHERE D.DEPARTMENT_NAME='국어국문학과';


-- 5-4. 현 학과들의 정원을 10% 증가시키게 되었다. 이에 사용할 SQL 문을 작성하시오. (단, 반올림을 사용하여 소수점 자릿수는 생기지 않도록 핚다)
UPDATE TB_DEPARTMENT 
SET CAPACITY=ROUND(CAPACITY+(CAPACITY*0.1), 0);

--ROLLBACK;
--SELECT DEPARTMENT_NAME, CAPACITY, ROUND(CAPACITY+(CAPACITY*0.1), 0)
--FROM TB_DEPARTMENT;

-- 5-5. 학번 A413042 인 박건우 학생의 주소가 "서울시 종로구 숭인동 181-21"로 변경되었다고 한다. 
-- 주소지를 정정하기 위해 사용할 SQL 문을 작성하시오.
UPDATE TB_STUDENT
SET STUDENT_ADDRESS='서울시 종로구 숭인동 181-21'
WHERE STUDENT_NO='A413042';

--SELECT STUDENT_NAME, STUDENT_ADDRESS
--FROM TB_STUDENT
--WHERE STUDENT_NO='A413042';

-- 5-6. 주민등록번호 보호법에 따라 학생정보 테이블에서 주민번호 뒷자리를 저장하지 않기로 결정하였다. 
--      이 내용을 반영할 적절한 SQL 문장을 작성하시오. (예. 830530-2124663 ==> 830530 )
UPDATE TB_STUDENT
SET STUDENT_SSN=SUBSTR(STUDENT_SSN, 1, 6);

ROLLBACK;

SELECT STUDENT_SSN
FROM TB_STUDENT;    
-- RPAD(SUBSTR(STUDENT_SSN, 1, 7), 14, '*')   
-- CONCAT(SUBSTR(STUDENT_SSN, 1, 7), '*******')

-- 5-7.  의학과 김명훈 학생은 2005 년 1 학기에 자신이 수강한 '피부생리학' 점수가 잘못되었다는 것을 발견하고는 정정을 요청하였다. 
-- 담당 교수의 확인 받은 결과 해당 과목의 학점을 3.5 로 변경키로 결정되었다. 적절한 SQL 문을 작성하시오.
UPDATE TB_GRADE
SET POINT=3.5
WHERE (STUDENT_NO, CLASS_NO)=(SELECT S.STUDENT_NO, C.CLASS_NO
       FROM TB_STUDENT S
       LEFT JOIN TB_GRADE G ON(G.STUDENT_NO=S.STUDENT_NO)
       LEFT JOIN TB_CLASS C ON(C.CLASS_NO=G.CLASS_NO)
       WHERE S.STUDENT_NAME='김명훈' AND C.CLASS_NAME='피부생리학');

ROLLBACK;

SELECT S.STUDENT_NO, S.STUDENT_NAME, G.POINT, C.CLASS_NAME, G.TERM_NO, C.CLASS_NO
FROM TB_STUDENT S
LEFT JOIN TB_GRADE G ON(G.STUDENT_NO=S.STUDENT_NO)
LEFT JOIN TB_CLASS C ON(C.CLASS_NO=G.CLASS_NO)
WHERE S.STUDENT_NAME='김명훈' AND C.CLASS_NAME='피부생리학';

-- 5-8. 성적 테이블(TB_GRADE) 에서 휴학생들의 성적항목을 제거하시오.
DELETE FROM TB_GRADE
WHERE STUDENT_NO IN(SELECT G.STUDENT_NO
                  FROM TB_STUDENT S
                  LEFT JOIN TB_GRADE G ON(G.STUDENT_NO=S.STUDENT_NO) 
                  WHERE ABSENCE_YN='Y'
);

ROLLBACK;

SELECT G.STUDENT_NO, S.STUDENT_NAME, S.absence_yn, G.POINT
FROM TB_STUDENT S
LEFT JOIN TB_GRADE G ON(G.STUDENT_NO=S.STUDENT_NO) 
WHERE ABSENCE_YN='Y';

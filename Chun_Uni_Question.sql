-- 1. 
SELECT DEPARTMENT_NAME AS "학과 명", CATEGORY AS "계열"
FROM TB_DEPARTMENT;

-- 2. 
SELECT DEPARTMENT_NAME||'의 정원은 '||CAPACITY||'명 입니다.' AS "학과별 정원"
FROM TB_DEPARTMENT;

--3. 
SELECT S.STUDENT_NAME
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO=D.DEPARTMENT_NO)
WHERE D.DEPARTMENT_NAME='국어국문학과' AND SUBSTR(S.STUDENT_SSN, 8, 1)=2 AND S.ABSENCE_YN='Y';

--4. 
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO IN('A513079', 'A513090', 'A513091', 'A513110', 'A513119')
ORDER BY STUDENT_NAME DESC;

--5. 
SELECT DEPARTMENT_NAME, CATEGORY
FROM TB_DEPARTMENT
WHERE CAPACITY>=20 AND CAPACITY<=30;

--6. 
SELECT PROFESSOR_NAME
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO IS NULL;

--7. 
SELECT *
FROM TB_STUDENT
WHERE DEPARTMENT_NO IS NULL;

--8. (제대로 입력안된건지 C0432500, C3221500은 데이터가 없음)
SELECT CLASS_NO
FROM TB_CLASS
WHERE PREATTENDING_CLASS_NO IS NOT NULL;

--9.
SELECT DISTINCT CATEGORY
FROM TB_DEPARTMENT;

-- 10. 
SELECT STUDENT_NO, STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ENTRANCE_DATE LIKE '_2%' AND STUDENT_ADDRESS LIKE '전주%' AND ABSENCE_YN='N';
--WHERE ENTRANCE_DATE BETWEEN '02/01/01' AND '02/12/31';

-------------------------------------------------------------------------------------------------------------
-- 2-1. 
SELECT STUDENT_NO "학번", STUDENT_NAME "이름", TO_CHAR(ENTRANCE_DATE, 'YYYY-MM-DD') "입학년도"
FROM TB_STUDENT
WHERE DEPARTMENT_NO=002
ORDER BY STUDENT_NAME;

-- 2-2
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE PROFESSOR_NAME NOT LIKE '___';

-- 2-3 (현재 년도를 2008년으로 설정함, 근데 결과와는 좀 다름.. 근데 나이별 내림차면 이게 맞는것 같은데.. 나중에 확인필요)
SELECT PROFESSOR_NAME "교수이름", 2008-CONCAT(19, SUBSTR(PROFESSOR_SSN, 1, 2)) "나이"
FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN, 8, 1)=1
ORDER BY PROFESSOR_SSN DESC;


--2-4.
SELECT SUBSTR(PROFESSOR_NAME, 2, 4) "이름"
FROM TB_PROFESSOR;

-- 2-5. 
SELECT STUDENT_NO, STUDENT_NAME 
/*, STUDENT_SSN, ENTRANCE_DATE, TO_CHAR(ENTRANCE_DATE, 'YYYY')-CONCAT(19, SUBSTR(STUDENT_SSN, 1, 2))"입학나이"*/
FROM TB_STUDENT
WHERE TO_CHAR(ENTRANCE_DATE, 'YYYY')-CONCAT(19, SUBSTR(STUDENT_SSN, 1, 2))>19;


-- 2-6.
SELECT TO_CHAR(TO_DATE('20201225'), 'DAY') AS "2020년 크리스마스 요일" FROM DUAL;

-- 2-7 (YY일 경우) : 2099년10월11일, 2049년10월11일
--     (RR일 경우) : 1999년 10월11일, 2049년10월11일
--다만 YYYY, RRRR일 경우에는 차이가 없다고 한다. 
SELECT TO_CHAR(TO_DATE('49/10/11'), 'YYYY/MM/DD') FROM DUAL;
SELECT TO_CHAR(TO_DATE('99/10/11'), 'YYYY/MM/DD') FROM DUAL;
SELECT TO_CHAR(TO_DATE('49/10/11'), 'RRRR/MM/DD') FROM DUAL;
SELECT TO_CHAR(TO_DATE('99/10/11'), 'RRRR/MM/DD') FROM DUAL;

-- 2-8.
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE TO_CHAR(ENTRANCE_DATE, 'RR')>'2000';


-- 2-9.
SELECT ROUND(SUM(POINT)/8, 1)"평점"
FROM TB_GRADE
WHERE STUDENT_NO='A517178';

-- 2-10.
SELECT DEPARTMENT_NO "학과번호", COUNT(DEPARTMENT_NO) "학생수(명)"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY "학과번호";

-- 2-11.
SELECT COUNT(CASE WHEN COACH_PROFESSOR_NO IS NULL THEN 'NULL' ELSE '1' END) "COUNT(*)"
FROM TB_STUDENT
GROUP BY COACH_PROFESSOR_NO
HAVING COACH_PROFESSOR_NO IS NULL;

-- 2-12.
SELECT SUBSTR(TERM_NO, 1, 4) "년도", ROUND(AVG(POINT), 1) "년도 별 평점"
FROM TB_GRADE
WHERE STUDENT_NO='A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4)
ORDER BY SUBSTR(TERM_NO, 1, 4);

--SELECT "년도", SUM("평점")
--FROM (SELECT SUBSTR(TERM_NO, 1, 4)"년도", SUM(POINT) AS "평점"
--      FROM TB_GRADE
--      WHERE STUDENT_NO='A112113'
--      GROUP BY TERM_NO)
--GROUP BY "년도"
--ORDER BY "년도";

-- 2-13 (제일 오래걸렸음;; COUNT가 0은 아예 결과값이 없어서ㅠ JOIN도 해보고 UNION도 해보다가 그냥 서브쿼리 만듬)
-- COUNT는 0은 아예 결과값이 없음. 이 경우 COUNT(*)을 포함한 서브쿼리 작성 → 그걸 FROM절에 넣고 결과값을 뽑는다!
SELECT DEPARTMENT_NO "학과코드명", "휴학생 수" 
FROM (SELECT DEPARTMENT_NO, COUNT(*), COUNT(DECODE(ABSENCE_YN, 'Y', 1)) AS "휴학생 수"
      FROM TB_STUDENT
      GROUP BY DEPARTMENT_NO)
ORDER BY DEPARTMENT_NO;

--SELECT DEPARTMENT_NO, COUNT(*), COUNT(DECODE(ABSENCE_YN, 'Y', 1))
--FROM TB_STUDENT
--GROUP BY DEPARTMENT_NO
--ORDER BY DEPARTMENT_NO;

-- 2-14. 
SELECT STUDENT_NAME "동일이름", COUNT(STUDENT_NAME) "동명인 수"
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(STUDENT_NAME)>1
ORDER BY STUDENT_NAME;


-- 2-15
SELECT SUBSTR(TERM_NO, 1, 4) "년도", SUBSTR(TERM_NO, 5, 2) "학기", ROUND(AVG(POINT), 1) "평점"
FROM TB_GRADE
WHERE STUDENT_NO='A112113'
GROUP BY ROLLUP(SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5, 2));
--------------------------------------------------------------------------------------------------------------
-- 3-1.
SELECT STUDENT_NAME "학생 이름", STUDENT_ADDRESS "주소지"
FROM TB_STUDENT
ORDER BY STUDENT_NAME;

-- 3-2.
SELECT STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN='Y'
ORDER BY STUDENT_SSN DESC;

-- 3-3. 
SELECT STUDENT_NAME "학생이름", STUDENT_NO "학번", STUDENT_ADDRESS"거주지 주소"
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_ADDRESS, 1, 3) IN ('경기도', '강원도') AND STUDENT_NO LIKE '9%'
ORDER BY STUDENT_NAME;


-- 3-4.
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO='005'
ORDER BY PROFESSOR_SSN;


-- 3-5.
SELECT G.STUDENT_NO, TO_CHAR(G.POINT, '9.99')
FROM TB_STUDENT S
LEFT JOIN TB_GRADE G ON(S.STUDENT_NO=G.STUDENT_NO)
WHERE TERM_NO=200402 AND CLASS_NO='C3118100'
ORDER BY POINT DESC;


-- 3-6. 
SELECT STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON(S.DEPARTMENT_NO=D.DEPARTMENT_NO)
ORDER BY STUDENT_NAME;

-- 3-7.
SELECT C.CLASS_NAME, D.DEPARTMENT_NAME
FROM TB_CLASS C
JOIN TB_DEPARTMENT D ON(C.DEPARTMENT_NO=D.DEPARTMENT_NO);

-- 3-8. 순서 미묘하게 다른데.. 결과는 여튼 같음.
SELECT C.CLASS_NAME, P.PROFESSOR_NAME
FROM TB_CLASS C
JOIN TB_DEPARTMENT D ON(C.DEPARTMENT_NO=D.DEPARTMENT_NO)
JOIN TB_CLASS_PROFESSOR CP ON(CP.CLASS_NO=C.CLASS_NO)
JOIN TB_PROFESSOR P ON(P.PROFESSOR_NO=CP.PROFESSOR_NO);

--3-9. 순서는 뭔가 틀린데.. 여튼 결과수는 맞음. 
SELECT C.CLASS_NAME, P.PROFESSOR_NAME
FROM TB_CLASS C
JOIN TB_DEPARTMENT D ON(C.DEPARTMENT_NO=D.DEPARTMENT_NO)
JOIN TB_CLASS_PROFESSOR CP ON(CP.CLASS_NO=C.CLASS_NO)
JOIN TB_PROFESSOR P ON(P.PROFESSOR_NO=CP.PROFESSOR_NO)
WHERE D.CATEGORY='인문사회';


--3-10.
SELECT S.STUDENT_NO "학번", S.STUDENT_NAME "학생 이름", ROUND(AVG(G.POINT), 1) "전체 평점"
FROM TB_STUDENT S
JOIN TB_GRADE G ON (S.STUDENT_NO=G.STUDENT_NO)
WHERE S.DEPARTMENT_NO='059'
GROUP BY (S.STUDENT_NO, S.STUDENT_NAME)
ORDER BY S.STUDENT_NO;

--3-11.
SELECT D.DEPARTMENT_NAME "학과이름", S.STUDENT_NAME "학생이름", P.PROFESSOR_NAME "지도교수이름"
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D ON(d.department_no=s.department_no)
JOIN TB_PROFESSOR P ON(P.PROFESSOR_NO=s.coach_professor_no)
WHERE STUDENT_NO='A313047';

-- 3-12.
SELECT STUDENT_NAME, TERM_NO "TERM_NAME"
FROM TB_STUDENT S
JOIN TB_GRADE G ON(S.STUDENT_NO=G.STUDENT_NO)
WHERE G.CLASS_NO='C2604100' AND SUBSTR(TERM_NO, 1, 4)=2007
ORDER BY STUDENT_NAME;

-- 3-13. 순서는 다르지만 결과는 같음
SELECT C.CLASS_NAME, D.DEPARTMENT_NAME
FROM TB_CLASS C
LEFT JOIN TB_CLASS_PROFESSOR CP ON(C.CLASS_NO=CP.CLASS_NO)
LEFT JOIN TB_DEPARTMENT D ON(c.department_no=d.department_no)
WHERE CP.PROFESSOR_NO IS NULL AND D.CATEGORY='예체능';


-- 3-14.
SELECT S.STUDENT_NAME "학생이름", NVL(P.PROFESSOR_NAME, '지도교수 미지정') "지도교수"
FROM TB_STUDENT S
LEFT JOIN TB_DEPARTMENT D ON(D.DEPARTMENT_NO=S.DEPARTMENT_NO)
LEFT JOIN TB_PROFESSOR P ON(P.PROFESSOR_NO=S.COACH_PROFESSOR_NO)
WHERE D.DEPARTMENT_NAME='서반아어학과'
ORDER BY s.student_no;


-- 3-15. 휴학생 아니면서 평점 4.0인 학생 20명으로 뜨는데. 아 근데 이건 내 테이블이랑 GIT테이블이랑 좀 다르게 해서 그럴수 있으니
-- 나중에 테이블 바꿔서 확인해보자. 
SELECT DISTINCT S.STUDENT_NO, S.STUDENT_NAME, D.DEPARTMENT_NAME, ROUND(AVG(G.POINT), 8)
FROM TB_STUDENT S
LEFT JOIN TB_DEPARTMENT D ON(D.DEPARTMENT_NO=S.DEPARTMENT_NO)
LEFT JOIN TB_GRADE G ON(S.STUDENT_NO=G.STUDENT_NO) 
WHERE S.ABSENCE_YN='N'
GROUP BY (S.STUDENT_NO, S.STUDENT_NAME, D.DEPARTMENT_NAME)
HAVING AVG(G.POINT)>=4.0
ORDER BY S.STUDENT_NO;


-- 3-16.
SELECT DISTINCT C.CLASS_NO, C.CLASS_NAME, TRUNC(AVG(G.POINT), 8) "AVG(POING)"
FROM TB_CLASS C
LEFT JOIN TB_GRADE G ON(g.class_no=c.class_no)
LEFT JOIN TB_DEPARTMENT D ON(D.DEPARTMENT_NO=C.DEPARTMENT_NO)
WHERE d.department_name='환경조경학과' AND SUBSTR(C.CLASS_TYPE, 1, 2)='전공'
GROUP BY(C.CLASS_NO, C.CLASS_NAME)
ORDER BY C.CLASS_NO;


-- 3-17.
SELECT STUDENT_NAME, STUDENT_ADDRESS
FROM TB_STUDENT
WHERE DEPARTMENT_NO='038';

-- 3-18. 이렇게 까지 어렵게 하진 않을것 같은데 ROWNUM 써보려고 하다보니 그냥..좀 ... 복잡해짐.. 다음에 간단하게 바꾸자. 
SELECT "STUDENT_NO", "STUDENT_NAME"
FROM (SELECT ROWNUM, "STUDENT_NO", "STUDENT_NAME", "평점"
        FROM (SELECT S.STUDENT_NO "STUDENT_NO", S.STUDENT_NAME "STUDENT_NAME", AVG(g.point)"평점"
        FROM TB_STUDENT S
        JOIN TB_DEPARTMENT D ON(s.department_no=d.department_no)
        JOIN TB_GRADE G ON(g.student_no=s.student_no)
        WHERE d.department_name='국어국문학과'
        GROUP BY (S.STUDENT_NO, S.STUDENT_NAME)
        ORDER BY AVG(g.point) DESC)
    WHERE ROWNUM<=1); 


-- 3-19.
SELECT d.department_name "계열 학과명", ROUND(AVG(G.POINT), 1) "전공평점"
FROM TB_DEPARTMENT D
LEFT JOIN TB_STUDENT S ON(S.DEPARTMENT_NO=D.DEPARTMENT_NO)
LEFT JOIN TB_GRADE G ON(g.student_no=s.student_no)
LEFT JOIN TB_CLASS C ON(c.class_no=g.class_no)
WHERE CATEGORY='자연과학' AND SUBSTR(C.CLASS_TYPE, 1, 2)='전공'
GROUP BY d.department_name
ORDER BY d.department_name;


SELECT * FROM TB_STUDENT;
SELECT * FROM TB_PROFESSOR;
SELECT * FROM TB_DEPARTMENT;
SELECT * FROM TB_GRADE;
SELECT * FROM TB_CLASS;
SELECT * FROM TB_CLASS_PROFESSOR;

-----------------------------------------------------------------------------------------------------
-- 4-1.
CREATE TABLE TB_CATEGORY(
    NAME VARCHAR2(10),
    USE_YN CHAR(1) DEFAULT 'Y'
);

-- 4-2.    
CREATE TABLE TB_CLASS_TYPE(
    NO VARCHAR2(5) CONSTRAINT TB_CLASS_TYPE_NO_PK PRIMARY KEY, 
    NAME VARCHAR2(10)
);

-- 4-3. ALTER TABLE 테이블명 ADD [CONSTRAINT 제약조건명] PRIMARY KEY(컬럼명); 
ALTER TABLE TB_CATEGORY
ADD CONSTRAINT TB_CATEGORY_NAME_PK PRIMARY KEY(NAME);

--4-4. ALTER TABLE 테이블명 MODIFY 컬럼명 [CONSTRAINT 제약조건명] NOT NULL;
ALTER TABLE TB_CLASS_TYPE
MODIFY NAME CONSTRAINT TB_CLASS_TYPE_NAME_NN NOT NULL;

--4-5. 데이터 타입 변경 : ALTER TABLE 테이블명 MODIFY 컬럼명 변경할 데이터타입
ALTER TABLE TB_CLASS_TYPE MODIFY NO VARCHAR2(10);
ALTER TABLE TB_CLASS_TYPE MODIFY NAME VARCHAR2(20);
ALTER TABLE TB_CATEGORY MODIFY NAME VARCHAR2(20);

-- 4-6. 컬럼명 변경 : ALTER TABLE 테이블명 RENAME COLUMN 기존컬럼명 TO 변경할컬럼명
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NAME TO CLASS_TYPE_NAME;
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NO TO CLASS_TYPE_NO;
ALTER TABLE TB_CATEGORY RENAME COLUMN NAME TO CATEGORY_NAME;

-- 4-7.
ALTER TABLE TB_CATEGORY RENAME CONSTRAINT TB_CATEGORY_NAME_PK TO PK_CATEGORY_NAME;
ALTER TABLE TB_CLAS_TYPE RENAME CONSTRAINT TB_CLASS_TYPE_NO_PK TO PK_CLASS_TYPE_NO;

-- 4-8.
INSERT INTO TB_CATEGORY VALUES ('공학','Y');
INSERT INTO TB_CATEGORY VALUES ('자연과학','Y');
INSERT INTO TB_CATEGORY VALUES ('의학','Y');
INSERT INTO TB_CATEGORY VALUES ('예체능','Y');
INSERT INTO TB_CATEGORY VALUES ('인문사회','Y');
COMMIT;

-- 4-9. ALTER TABLE 테이블명 ADD [CONSTRAINT 제약조건명] FOREIGN KEY(컬럼명) REFERENCES 테이블명 [(컬럼명)];
ALTER TABLE TB_DEPARTMENT ADD CONSTRAINT FK_DEPARTMENT_CATEGORY FOREIGN KEY(CATEGORY) REFERENCES TB_CATEGORY(CATEGORY_NAME);


-- 4-10. 뷰 생성
CREATE OR REPLACE VIEW VW_학생일반정보
AS SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
    FROM TB_STUDENT;

-- 4-11.
CREATE OR REPLACE VIEW VW_지도면담
AS SELECT S.STUDENT_NAME, D.DEPARTMENT_NAME, P.PROFESSOR_NAME
    FROM TB_STUDENT S
    LEFT JOIN TB_DEPARTMENT D ON(D.DEPARTMENT_NO=S.DEPARTMENT_NO)
    LEFT JOIN TB_PROFESSOR P ON(p.professor_no=S.COACH_PROFESSOR_NO)
    ORDER BY D.DEPARTMENT_NAME;
    
    
-- 4-12.
CREATE OR REPLACE VIEW VW_학과별학생수
AS SELECT D.DEPARTMENT_NAME, COUNT(S.STUDENT_NO)"STUDENT_COUNT"
    FROM TB_STUDENT S
    LEFT JOIN TB_DEPARTMENT D ON(d.department_no=s.department_no)
    GROUP BY DEPARTMENT_NAME;
    
-- 4-13.
UPDATE VW_학생일반정보
SET STUDENT_NAME='감자' --원래는 '서가람'임
WHERE STUDENT_NO='A213046';

SELECT STUDENT_NO, STUDENT_NAME
FROM VW_학생일반정보
WHERE STUDENT_NO='A213046';

-- 4-14. 뷰 생성(READ ONLY)
CREATE OR REPLACE VIEW VW_학생일반정보
AS SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
    FROM TB_STUDENT
WITH READ ONLY;

-- 4-15.
SELECT "과목번호", "과목이름", "수강생수"
FROM (SELECT ROWNUM, "과목번호", "과목이름", "수강생수"
FROM (SELECT C.CLASS_NO "과목번호", C.CLASS_NAME "과목이름", COUNT(*) AS "수강생수"
        FROM TB_CLASS C
        LEFT JOIN TB_GRADE G ON(C.CLASS_NO=G.CLASS_NO)
        WHERE SUBSTR(G.TERM_NO, 1, 4) IN (2009, 2008, 2007, 2006, 2005)
        GROUP BY C.CLASS_NO, C.CLASS_NAME
        ORDER BY COUNT(*) DESC)
    WHERE ROWNUM<=3);
    
SELECT C.CLASS_NO "과목번호", C.CLASS_NAME "과목이름", COUNT(*) "누적수강생수(명)"
FROM TB_CLASS C
LEFT JOIN TB_GRADE G ON(C.CLASS_NO=G.CLASS_NO)
WHERE SUBSTR(G.TERM_NO, 1, 4) IN (2009, 2008, 2007, 2006, 2005)
GROUP BY C.CLASS_NO, C.CLASS_NAME
ORDER BY COUNT(*) DESC;


-------------------------------------------------------------------------------------------------------------------
--[DML]5-1. 과목유형 테이블(TB_CLASS_TYPE)에 아래와 같은 데이터를 입력하시오.
INSERT INTO TB_CLASS_TYPE VALUES('01,', '전공필수');
INSERT INTO TB_CLASS_TYPE VALUES('02,', '전공선택');
INSERT INTO TB_CLASS_TYPE VALUES('03,', '교양필수');
INSERT INTO TB_CLASS_TYPE VALUES('04,', '교양선택');
INSERT INTO TB_CLASS_TYPE VALUES('05.', '논문지도');
SELECT * FROM TB_CLASS_TYPE;


-- 5-2. 춘 기술대학교 학생들의 정보가 포함되어 있는 학생일반정보 테이블을 만들고자 핚다. 
-- 아래 내용을 참고하여 적절한 SQL 문을 작성하시오. (서브쿼리를 이용하시오)
CREATE TABLE TB_학생일반정보
AS SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
    FROM TB_STUDENT;
    
-- 5-3. 국어국문학과 학생들의 정보맊이 포함되어 있는 학과정보 테이블을 만들고자 한다.  
-- 아래 내용을 참고하여 적절한 SQL 문을 작성하시오. (힌트 : 방법은 다양함, 소신껏 작성하시오)
CREATE TABLE TB_국어국문학과
AS SELECT S.STUDENT_NO "학번", 
       S.STUDENT_NAME "학생이름", 
       EXTRACT(YEAR FROM TO_DATE(SUBSTR(S.STUDENT_SSN, 1, 6), 'RRMMDD'))"출생년도", 
       NVL(P.PROFESSOR_NAME, '지도교수 없음') "교수이름" 
    FROM TB_STUDENT S
    LEFT JOIN TB_PROFESSOR P ON(S.COACH_PROFESSOR_NO=P.PROFESSOR_NO)    
    LEFT JOIN TB_DEPARTMENT D ON(D.DEPARTMENT_NO=S.DEPARTMENT_NO)
    WHERE D.DEPARTMENT_NAME='국어국문학과';


-- 5-4. 현 학과들의 정원을 10% 증가시키게 되었다. 이에 사용할 SQL 문을 작성하시오. (단, 반올림을 사용하여 소수점 자릿수는 생기지 않도록 핚다)
UPDATE TB_DEPARTMENT 
SET CAPACITY=ROUND(CAPACITY+(CAPACITY*0.1), 0);

--ROLLBACK;
--SELECT DEPARTMENT_NAME, CAPACITY, ROUND(CAPACITY+(CAPACITY*0.1), 0)
--FROM TB_DEPARTMENT;

-- 5-5. 학번 A413042 인 박건우 학생의 주소가 "서울시 종로구 숭인동 181-21"로 변경되었다고 한다. 
-- 주소지를 정정하기 위해 사용할 SQL 문을 작성하시오.
UPDATE TB_STUDENT
SET STUDENT_ADDRESS='서울시 종로구 숭인동 181-21'
WHERE STUDENT_NO='A413042';

--SELECT STUDENT_NAME, STUDENT_ADDRESS
--FROM TB_STUDENT
--WHERE STUDENT_NO='A413042';

-- 5-6. 주민등록번호 보호법에 따라 학생정보 테이블에서 주민번호 뒷자리를 저장하지 않기로 결정하였다. 
--      이 내용을 반영할 적절한 SQL 문장을 작성하시오. (예. 830530-2124663 ==> 830530 )
UPDATE TB_STUDENT
SET STUDENT_SSN=SUBSTR(STUDENT_SSN, 1, 6);

ROLLBACK;

SELECT STUDENT_SSN
FROM TB_STUDENT;    
-- RPAD(SUBSTR(STUDENT_SSN, 1, 7), 14, '*')   
-- CONCAT(SUBSTR(STUDENT_SSN, 1, 7), '*******')

-- 5-7.  의학과 김명훈 학생은 2005 년 1 학기에 자신이 수강한 '피부생리학' 점수가 잘못되었다는 것을 발견하고는 정정을 요청하였다. 
-- 담당 교수의 확인 받은 결과 해당 과목의 학점을 3.5 로 변경키로 결정되었다. 적절한 SQL 문을 작성하시오.
UPDATE TB_GRADE
SET POINT=3.5
WHERE (STUDENT_NO, CLASS_NO)=(SELECT S.STUDENT_NO, C.CLASS_NO
       FROM TB_STUDENT S
       LEFT JOIN TB_GRADE G ON(G.STUDENT_NO=S.STUDENT_NO)
       LEFT JOIN TB_CLASS C ON(C.CLASS_NO=G.CLASS_NO)
       WHERE S.STUDENT_NAME='김명훈' AND C.CLASS_NAME='피부생리학');

ROLLBACK;

SELECT S.STUDENT_NO, S.STUDENT_NAME, G.POINT, C.CLASS_NAME, G.TERM_NO, C.CLASS_NO
FROM TB_STUDENT S
LEFT JOIN TB_GRADE G ON(G.STUDENT_NO=S.STUDENT_NO)
LEFT JOIN TB_CLASS C ON(C.CLASS_NO=G.CLASS_NO)
WHERE S.STUDENT_NAME='김명훈' AND C.CLASS_NAME='피부생리학';

-- 5-8. 성적 테이블(TB_GRADE) 에서 휴학생들의 성적항목을 제거하시오.
DELETE FROM TB_GRADE
WHERE STUDENT_NO IN(SELECT G.STUDENT_NO
                  FROM TB_STUDENT S
                  LEFT JOIN TB_GRADE G ON(G.STUDENT_NO=S.STUDENT_NO) 
                  WHERE ABSENCE_YN='Y'
);

ROLLBACK;

SELECT G.STUDENT_NO, S.STUDENT_NAME, S.absence_yn, G.POINT
FROM TB_STUDENT S
LEFT JOIN TB_GRADE G ON(G.STUDENT_NO=S.STUDENT_NO) 
WHERE ABSENCE_YN='Y';
